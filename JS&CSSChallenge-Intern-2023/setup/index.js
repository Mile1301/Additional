const btnDiv = document.querySelector(".btnDiv");
const layoutPlaceholder = document.querySelector(".layout-placeholder");
const filtersContainer = document.querySelector(".radio-group:nth-of-type(2)");
const filterBySource = document.querySelectorAll("input[name='filterBySource']");

let postCounter = 4;
const itemsPerPage = 4;
let filteredPosts = [];

async function getAllPosts(filterType) {
  try {
    const response = await fetch("../data.json");
    const result = await response.json();
    let filteredResult = result;
    if (filterType && filterType !== "all") {
      filteredResult = result.filter((post) => post.source_type === filterType);
    }
    renderAllPosts(filteredResult);
    return filteredResult;
  } catch (error) {
    console.error(error.message);
  }
}

async function renderAllPosts(cards) {
  try {
    layoutPlaceholder.innerHTML = "";
    btnDiv.innerHTML = "";
    if (!cards && filteredPosts.length === 0) {
      cards = await getAllPosts();
    }
    cards.forEach((card, i) => {
      const singleCard = document.createElement("div");
      singleCard.classList.add("socialMedia-card");
      singleCard.classList.add(`sm-${i}`);
      singleCard.innerHTML = `
<div class="socialMedia-card-header">
  <img src="${card.profile_image}" class="socialMedia-card-user-image"/>
<div class="socialMedia-card-userAndDateContainer">
  <a class="socialMedia-card-user-name" href="">${card.name}</a>
  <span class="socialMedia-card-date">${card.date.substr(0, 10)}</span>
  </div>
  <img src="${card.source_type === "facebook" ? "../icons/facebook.svg" : "../icons/instagram-logo.svg"}" class="socialMedia-card-icon"/>
</div>
<div class="socialMedia-card-image">
<img src="${card.image}" class="socialMedia-card-image-background"/>
</div>
<div class="socialMedia-card-content">
<p>${
        card.caption === "" ? (card.caption = "This is AUTOGENERATED MESSAGE because the user didn't write anything") : card.caption.substr(0, 270)
      }...</p>
    <hr>
</div>  
<div class="socialMedia-card-footer">
<img src=${"../icons/heart.svg"}  class="socialMedia-card-footer-icon"/>
    <span class="socialMedia-card-footer-likes">${card.likes}</span>
</div>`;
      layoutPlaceholder.appendChild(singleCard);
    });
    const posts = document.querySelectorAll(".socialMedia-card");
    const heartIcon = document.querySelectorAll(".socialMedia-card-footer-icon");
    hidePosts(posts);
    iconButton(heartIcon);
    changeSettings(posts);
  } catch (error) {
    console.error(error);
  }
}

function hidePosts(allPosts) {
  for (let post of allPosts) {
    for (let i = postCounter; i < allPosts.length; i++) {
      if (post.classList.contains(`sm-${i}`)) {
        post.classList.add("dNone");
      }
    }
  }
  nextButton();
}

function nextButton() {
  const nextBtn = document.createElement("button");
  nextBtn.classList.add("nextBtn");
  nextBtn.innerHTML = "Next 4 posts топ";
  if (layoutPlaceholder.children.length === 0 || btnDiv.children.length >= 1) {
    nextBtn.classList.add("dNone");
  }
  btnDiv.appendChild(nextBtn);

  if (postCounter <= 20) {
    nextBtn.addEventListener("click", () => {
      postCounter += 4;
      if (filteredPosts.length > 0) {
        const filteredPostsSubset = filteredPosts.slice(postCounter - itemsPerPage, postCounter);
        renderAllPosts(filteredPostsSubset);
      } else {
        getAllPosts(filterBySource.value);
      }
    });
    if (postCounter === 20 || (filteredPosts.length !== 0 && filteredPosts.length / itemsPerPage < itemsPerPage)) nextBtn.classList.add("dNone");
  }
}

function iconButton(hearts) {
  for (let heart of hearts) {
    heart.addEventListener("click", () => {
      let isIconClicked = heart.classList.contains("clicked");
      if (!isIconClicked) {
        heart.src = "../icons/heart-clicked.svg";
        heart.classList.add("clicked");
        let likes = heart.nextElementSibling;
        likes.innerHTML = Number(likes.innerHTML) + 1;
      } else {
        heart.src = "../icons/heart.svg";
        heart.classList.remove("clicked");
        likes = heart.nextElementSibling;
        likes.innerHTML = Number(likes.innerHTML) - 1;
      }
    });
  }
}

// Filter by source///////////////////////
// ///////////////////////////////////////////////////////////////////////////////////

filtersContainer.addEventListener("change", async (e) => {
  try {
    let filterType = "";
    e.target.nodeName === "INPUT" && (filterType = e.target.value);

    if (filterType === "all") {
      filteredPosts = [];
      await renderAllPosts();
    } else {
      firstPosts = await getAllPosts();
      filteredPosts = firstPosts.filter((post) => post.source_type === filterType);
      renderAllPosts(filteredPosts);
    }
    reset();
  } catch (error) {
    console.error(error);
  }
});
// ///////////////////////////////////////////////////////////////////////////////////

function reset() {
  postCounter = 4;
}

function changeSettings(cards) {
  //////// Change dark/light theme
  const lightRadio = document.getElementById("lightTheme");
  const darkRadio = document.getElementById("darkTheme");

  lightRadio.addEventListener("change", () => {
    cards.forEach((card) => {
      card.classList.remove("dark");
    });
  });

  darkRadio.addEventListener("change", () => {
    cards.forEach((card) => {
      card.classList.add("dark");
    });
  });
  // ///////////////////////////////////////////////////////////////////////////////////

  // gap size changer
  const gapInput = document.getElementById("cardSpaceBetween");
  gapInput.addEventListener("change", (e) => {
    cards.forEach((card) => {
      card.style.marginBlock = e.target.value;
    });
  });
  // background color changer
  const bgColorInput = document.getElementById("cardBackgroundColor");
  bgColorInput.addEventListener("change", (e) => {
    cards.forEach((card) => {
      card.style.backgroundColor = e.target.value;
    });
  });
  // ///////////////////////////////////////////////////////////////////////////////////
  // Logic for the number of columns - i found it on internet - i don't know this syntax
  const numberOfColumns = document.getElementById("numberOfColumns");
  // This whole chunk of code below is from internet
  const root = document.documentElement;
  numberOfColumns.addEventListener("change", (e) => {
    // console.log(e.target.value);
    const numColumns = getComputedStyle(root).getPropertyValue("--num-columns");
    // Set the CSS variable to a new value
    root.style.setProperty("--num-columns", e.target.value);
  });
  // ///////////////////////////////////////////////////////////////////////////////////
}

// Logic for the back to top button
const btoTop = document.querySelector(".btoTop");

window.addEventListener("scroll", function () {
  if (window.pageYOffset > 0) {
    btoTop.classList.remove("dNone");
  } else {
    btoTop.classList.add("dNone");
  }
});

getAllPosts();
